@book{type_theory_and_formal_proof, 
place={Cambridge}, 
title={Type Theory and Formal Proof: An Introduction}, 
doi={10.1017/CBO9781139567725}, 
publisher={Cambridge University Press}, 
author={Nederpelt, Rob and Geuvers, Herman}, 
year={2014}
}

@article{lambdapi,
title = "A tutorial implementation of a dependently typed lambda calculus",
abstract = "We present the type rules for a dependently typed core calculus together with a straight-forward implementation in Haskell. We explicitly highlight the changes necessary to shift from a simply-typed lambda calculus to the dependently typed lambda calculus. We also describe how to extend our core language with data types and write several small example programs. The article is accompanied by an executable interpreter and example code that allows immediate experimentation with the system we describe.",
keywords = "core calculus, lambda calculus, Haskell",
author = "Andres L{\"o}h and Conor Mcbride and Wouter Swierstra",
year = "2010",
doi = "10.3233/FI-2010-304",
language = "English",
volume = "102",
pages = "177--207",
journal = "Fundamenta Informaticae",
issn = "0169-2968",
number = "2",
}

@book{tapl,
  abstract = {{A type system is a syntactic method for automatically checking the absence of certain erroneous behaviors by classifying program phrases according to the kinds of values they compute. The study of type systems--and of programming languages from a type-theoretic perspective -- -has important applications in software engineering, language design, high-performance compilers, and security. This text provides a comprehensive introduction both to type systems in computer science and to the basic theory of programming languages. The approach is pragmatic and operational; each new concept is motivated by programming examples and the more theoretical sections are driven by the needs of implementations. Each chapter is accompanied by numerous exercises and solutions, as well as a running implementation, available via the Web. Dependencies between chapters are explicitly identified, allowing readers to choose a variety of paths through the material. The core topics include the untyped lambda-calculus, simple type systems, type reconstruction, universal and existential polymorphism, subtyping, bounded quantification, recursive types, kinds, and type operators. Extended case studies develop a variety of approaches to modeling the features of object-oriented languages.}},
  added-at = {2017-06-29T07:13:07.000+0200},
  author = {Pierce, Benjamin C.},
  biburl = {https://www.bibsonomy.org/bibtex/2078fb5cb1e3638d53ec8aa21e241c306/gdmcbain},
  citeulike-article-id = {105547},
  citeulike-attachment-1 = {pierce_02_types_1110544.pdf; /pdf/user/gdmcbain/article/105547/1110544/pierce_02_types_1110544.pdf; 22f1c7b32c71606a20ff1a75bd784ae57685f7d2},
  citeulike-linkout-0 = {http://ropas.snu.ac.kr/\~{}kwang/520/pierce\_book.pdf},
  citeulike-linkout-1 = {http://www.amazon.ca/exec/obidos/redirect?tag=citeulike09-20\&amp;path=ASIN/0262162091},
  citeulike-linkout-10 = {http://www.librarything.com/isbn/0262162091},
  citeulike-linkout-11 = {http://www.worldcat.org/oclc/51958338},
  citeulike-linkout-2 = {http://www.amazon.de/exec/obidos/redirect?tag=citeulike01-21\&amp;path=ASIN/0262162091},
  citeulike-linkout-3 = {http://www.amazon.fr/exec/obidos/redirect?tag=citeulike06-21\&amp;path=ASIN/0262162091},
  citeulike-linkout-4 = {http://www.amazon.jp/exec/obidos/ASIN/0262162091},
  citeulike-linkout-5 = {http://www.amazon.co.uk/exec/obidos/ASIN/0262162091/citeulike00-21},
  citeulike-linkout-6 = {http://www.amazon.com/exec/obidos/redirect?tag=citeulike07-20\&path=ASIN/0262162091},
  citeulike-linkout-7 = {http://www.worldcat.org/isbn/0262162091},
  citeulike-linkout-8 = {http://books.google.com/books?vid=ISBN0262162091},
  citeulike-linkout-9 = {http://www.amazon.com/gp/search?keywords=0262162091\&index=books\&linkCode=qs},
  comment = {recommended by Tony Morris, NICTA, 2015-09-16
---=note-separator=---
Recommended as second text by 'type-theory/learn-tt':https://github.com/type-theory/learn-tt},
  day = 01,
  edition = 1,
  file = {pierce_02_types_1110544.pdf},
  howpublished = {Hardcover},
  interhash = {4d6e4bcf471203882efcef73f6463035},
  intrahash = {078fb5cb1e3638d53ec8aa21e241c306},
  isbn = {0262162091},
  keywords = {03b15-higher-order-logic-type-theory},
  month = feb,
  posted-at = {2015-09-16 07:18:50},
  priority = {5},
  publisher = {MIT Press},
  timestamp = {2017-06-29T07:13:07.000+0200},
  title = {{Types and Programming Languages}},
  url = {http://ropas.snu.ac.kr/\~{}kwang/520/pierce\_book.pdf},
  year = 2002
}

@techreport{plotkin_sos,
  abstract = {Syntax of a very simple programming language called L. What is abstract about it will be discussed a little here and later at greater length. For us syntax is a collection of syntactic sets of phrases; each set corresponds to a different type of phrase. Some of these sets are very simple and can be taken as given: Truthvalues This is the set T = ftt; ffg and is ranged over by (the metavariable) t (and we also happily employ for this (and any other) metavariable sub- and super-scripts to...},
  added-at = {2009-02-12T11:21:23.000+0100},
  address = {University of Aarhus},
  author = {Plotkin, G. D.},
  biburl = {https://www.bibsonomy.org/bibtex/212718b2f176aaf6ce4c8d8510b355d2f/leonardo},
  citeulike-article-id = {1437},
  description = {New Version: http://www.citeulike.org/user/leonardo/article/696122},
  interhash = {dc29e6898bdbd34bfae6cd829f8a7f86},
  intrahash = {12718b2f176aaf6ce4c8d8510b355d2f},
  keywords = {1981 sos},
  number = {DAIMI FN-19},
  posted-at = {2006-04-03 16:06:43},
  priority = {2},
  timestamp = {2009-02-12T11:21:23.000+0100},
  title = {A Structural Approach to Operational Semantics},
  url = {http://citeseer.ist.psu.edu/plotkin81structural.html},
  year = 1981
}

@article{coc_coquand_huet,
title = {The calculus of constructions},
journal = {Information and Computation},
volume = {76},
number = {2},
pages = {95-120},
year = {1988},
issn = {0890-5401},
doi = {https://doi.org/10.1016/0890-5401(88)90005-3},
url = {https://www.sciencedirect.com/science/article/pii/0890540188900053},
author = {Thierry Coquand and GÃ©rard Huet}
}

@misc{tpil,
  author = {Jeremy Avigad and Leonardo de Moura and Soonho Kong},
  title = {Theorem Proving in Lean},
  howpublished = {\url{https://leanprover.github.io/theorem_proving_in_lean/}},
  lastaccessed={April 18, 2021}
}

@misc{nbe,
  author = {David Thrane Christiansen},
  title = {Checking Dependent Types with Normalization by Evaluation: A Tutorial},
  howpublished={\url{http://davidchristiansen.dk/tutorials/nbe/}},
  lastaccessed={April 20, 2021}
}

@inproceedings{analysis_of_girard,
  added-at = {2015-01-22T00:00:00.000+0100},
  author = {Coquand, Thierry},
  biburl = {https://www.bibsonomy.org/bibtex/2ebbf0a12a09a966cc9188dab06c6c9e3/dblp},
  booktitle = {LICS},
  interhash = {f2d80f4842fd7e0acced335429343746},
  intrahash = {ebbf0a12a09a966cc9188dab06c6c9e3},
  isbn = {0-8186-0720-3},
  keywords = {dblp},
  pages = {227-236},
  publisher = {IEEE Computer Society},
  timestamp = {2015-06-20T03:11:52.000+0200},
  title = {An Analysis of Girard's Paradox},
  url = {http://dblp.uni-trier.de/db/conf/lics/lics86.html#Coquand86},
  year = 1986
}

@InProceedings{undecidable_type_infer,
author="Dowek, Gilles",
editor="Bezem, Marc
and Groote, Jan Friso",
title="The undecidability of typability in the Lambda-Pi-calculus",
booktitle="Typed Lambda Calculi and Applications",
year="1993",
publisher="Springer Berlin Heidelberg",
address="Berlin, Heidelberg",
pages="139--145",
abstract="The set of pure terms which are typable in the $\lambda$II-calculus in a given context is not recursive. So there is no general type inference algorithm for the programming language Elf and, in some cases, some type information has to be mentioned by the programmer.",
isbn="978-3-540-47586-6"
}

@article{elab_in_dtt,
  author    = {Leonardo Mendon{\c{c}}a de Moura and
               Jeremy Avigad and
               Soonho Kong and
               Cody Roux},
  title     = {Elaboration in Dependent Type Theory},
  journal   = {CoRR},
  volume    = {abs/1505.04324},
  year      = {2015},
  url       = {http://arxiv.org/abs/1505.04324},
  archivePrefix = {arXiv},
  eprint    = {1505.04324},
  timestamp = {Mon, 13 Aug 2018 16:48:06 +0200},
  biburl    = {https://dblp.org/rec/journals/corr/MouraAKR15.bib},
  bibsource = {dblp computer science bibliography, https://dblp.org}
}

@misc{cic_bidi_typing,
      title={Complete Bidirectional Typing for the Calculus of Inductive Constructions}, 
      author={Meven Lennon-Bertrand},
      year={2021},
      eprint={2102.06513},
      archivePrefix={arXiv},
      primaryClass={cs.PL}
}

@techreport{coc_strong_norm_kripke,
  title={A Proof of Strong Normalization for the Theory of Constructions Using a Kripke-Like Interpretation},
  author={Thierry Coquand and Jean H. Gallier},
  year=1990,
  url={https://repository.upenn.edu/cis_reports/568/},
  posted-at={2007-08-23}
}

@InProceedings{coc_strong_norm_short_flexible,
author="Geuvers, Herman",
editor="Dybjer, Peter
and Nordstr{\"o}m, Bengt
and Smith, Jan",
title="A short and flexible proof of strong normalization for the calculus of constructions",
booktitle="Types for Proofs and Programs",
year="1995",
publisher="Springer Berlin Heidelberg",
address="Berlin, Heidelberg",
pages="14--38",
isbn="978-3-540-47770-9"
}

@article{extended_coc,
author = {Luo, Zhaohui},
year = {1997},
month = {07},
pages = {},
title = {An Extended Calculus of Constructions}
}

@InProceedings{simplification_of_girard,
author="Hurkens, Antonius J. C.",
editor="Dezani-Ciancaglini, Mariangiola
and Plotkin, Gordon",
title="A simplification of Girard's paradox",
booktitle="Typed Lambda Calculi and Applications",
year="1995",
publisher="Springer Berlin Heidelberg",
address="Berlin, Heidelberg",
pages="266--278",
abstract="In 1972 J.-Y. Girard showed that the Burali-Forti paradox can be formalised in the type system U. In 1991 Th. Coquand formalised another paradox in Uâ. The corresponding proof terms (that have no normal form) are large. We present a shorter term of type â¥ in the Pure Type System $\lambda$Uâ and analyse its reduction behaviour. The idea is to construct a universe U and two functions such that a certain equality holds. Using this equality, we prove and disprove that a certain object in U is well-founded.",
isbn="978-3-540-49178-1"
}