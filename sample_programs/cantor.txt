// Type ascriptions in function bodies cause trouble.
def test := fun (T : Type) => (T : Kind)

def test := fun (T : Type) (x : T) => (x : Kind)


constant X : Type
constant Y : Type

// Axioms for equality
constant eq : forall (X : Type) (x : X) (y : X), Prop
axiom eq_refl : forall (X : Type) (x : X), eq X x x 
axiom eq_symm : forall (X : Type) (x : X) (y : X), (eq X x y) -> (eq X y x)
axiom eq_trans : 
    forall (X : Type) (x : X) (y : X) (z : X), 
        (eq X x y) -> (eq X y z) -> (eq X x z)

axiom congr_fun : 
  forall (f : X -> Y) (g : X -> Y), 
    (eq (X -> Y) f g) -> (forall x : X, eq Y (f x) (g x))

def has_fixed_point :=
  fun (X : Type) (f : X -> X) => exists x : X, eq X (f x) x

def surjective :=
  fun (X : Type) (Y : Type) (f : X -> Y) => forall y : Y, exists x : X, eq Y (f x) y


def cantor := fun 
  (h : exists g : X -> (X -> Y), surjective X (X -> Y) g)
  (f : Y -> Y) =>
  let g := fst h in
  let g_surj := snd h in
  let diag := fun (x : X) => f (g x x) in

  // This works.
  // (g_surj diag : exists x : X, eq (X -> Y) ((fst h) x) diag)

  // But this doesn't.
  // (g x) does not normalize to (fst h x)
  (g_surj diag : exists x : X, eq (X -> Y) (g x) diag)



// This works.
axiom h : exists g : X -> (X -> Y), surjective X (X -> Y) g
axiom f : Y -> Y

def g := fst h
def g_surj := snd h

def diag := fun (x : X) => f (g x x)

def h := (g_surj diag : exists x : X, eq (X -> Y) (g x) diag)

def x := fst h

def h := (snd h : eq (X -> Y) (g x) diag)

def h1 := (congr_fun (g x) diag h x : eq Y (g x x) (diag x))

def h2 := (eq_refl Y (diag x) : eq Y (diag x) (f (g x x)))

def h := (eq_trans Y (g x x) (diag x) (f (g x x)) h1 h2 : eq Y (g x x) (f (g x x)))

def h := (eq_symm Y (g x x) (f (g x x)) h : eq Y (f (g x x)) (g x x))

check ((g x x, h) : has_fixed_point Y f)